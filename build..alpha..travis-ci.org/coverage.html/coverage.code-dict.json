{"/home/travis/build/npmtest/node-npmtest-babel-loader/test.js":"/* istanbul instrument in package npmtest_babel_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-loader/lib.npmtest_babel_loader.js":"/* istanbul instrument in package npmtest_babel_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_babel_loader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_babel_loader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-loader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-babel-loader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_babel_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_babel_loader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_babel_loader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_babel_loader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_babel_loader.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_babel_loader.__dirname +\n                    '/lib.npmtest_babel_loader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-loader/babel-loader/lib/index.js":"\"use strict\";\n\nvar assign = require(\"object-assign\");\nvar babel = require(\"babel-core\");\nvar loaderUtils = require(\"loader-utils\");\nvar path = require(\"path\");\nvar cache = require(\"./fs-cache.js\");\nvar exists = require(\"./utils/exists\")();\nvar relative = require(\"./utils/relative\");\nvar read = require(\"./utils/read\")();\nvar resolveRc = require(\"./resolve-rc.js\");\nvar pkg = require(\"./../package.json\");\n\nfunction BabelLoaderError(name, message, codeFrame, hideStack, error) {\n  Error.call(this);\n  Error.captureStackTrace(this, BabelLoaderError);\n\n  this.name = \"BabelLoaderError\";\n  this.message = formatMessage(name, message, codeFrame);\n  this.hideStack = hideStack;\n  this.error = error;\n}\n\nBabelLoaderError.prototype = Object.create(Error.prototype);\nBabelLoaderError.prototype.constructor = BabelLoaderError;\n\nvar STRIP_FILENAME_RE = /^[^:]+: /;\n\nvar formatMessage = function formatMessage(name, message, codeFrame) {\n  return (name ? name + \": \" : \"\") + message + \"\\n\\n\" + codeFrame + \"\\n\";\n};\n\nvar transpile = function transpile(source, options) {\n  var forceEnv = options.forceEnv;\n  var tmpEnv = void 0;\n\n  delete options.forceEnv;\n\n  if (forceEnv) {\n    tmpEnv = process.env.BABEL_ENV;\n    process.env.BABEL_ENV = forceEnv;\n  }\n\n  var result = void 0;\n  try {\n    result = babel.transform(source, options);\n  } catch (error) {\n    if (forceEnv) restoreBabelEnv(tmpEnv);\n    if (error.message && error.codeFrame) {\n      var message = error.message;\n      var name = void 0;\n      var hideStack = void 0;\n      if (error instanceof SyntaxError) {\n        message = message.replace(STRIP_FILENAME_RE, \"\");\n        name = \"SyntaxError\";\n        hideStack = true;\n      } else if (error instanceof TypeError) {\n        message = message.replace(STRIP_FILENAME_RE, \"\");\n        hideStack = true;\n      }\n      throw new BabelLoaderError(name, message, error.codeFrame, hideStack, error);\n    } else {\n      throw error;\n    }\n  }\n  var code = result.code;\n  var map = result.map;\n  var metadata = result.metadata;\n\n  if (map && (!map.sourcesContent || !map.sourcesContent.length)) {\n    map.sourcesContent = [source];\n  }\n\n  if (forceEnv) restoreBabelEnv(tmpEnv);\n\n  return {\n    code: code,\n    map: map,\n    metadata: metadata\n  };\n};\n\nfunction restoreBabelEnv(prevValue) {\n  if (prevValue === undefined) {\n    delete process.env.BABEL_ENV;\n  } else {\n    process.env.BABEL_ENV = prevValue;\n  }\n}\n\nfunction passMetadata(s, context, metadata) {\n  if (context[s]) {\n    context[s](metadata);\n  }\n}\n\nmodule.exports = function (source, inputSourceMap) {\n  var _this = this;\n\n  var webpackRemainingChain = loaderUtils.getRemainingRequest(this).split(\"!\");\n  var filename = webpackRemainingChain[webpackRemainingChain.length - 1];\n\n  var globalOptions = this.options.babel || {};\n  var loaderOptions = loaderUtils.parseQuery(this.query);\n  var userOptions = assign({}, globalOptions, loaderOptions);\n  var defaultOptions = {\n    metadataSubscribers: [],\n    inputSourceMap: inputSourceMap,\n    sourceRoot: process.cwd(),\n    filename: filename,\n    cacheIdentifier: JSON.stringify({\n      \"babel-loader\": pkg.version,\n      \"babel-core\": babel.version,\n      babelrc: exists(userOptions.babelrc) ? read(userOptions.babelrc) : resolveRc(path.dirname(filename)),\n      env: userOptions.forceEnv || process.env.BABEL_ENV || process.env.NODE_ENV || \"development\"\n    })\n  };\n\n  var options = assign({}, defaultOptions, userOptions);\n\n  if (userOptions.sourceMap === undefined) {\n    options.sourceMap = this.sourceMap;\n  }\n\n  if (options.sourceFileName === undefined) {\n    options.sourceFileName = relative(options.sourceRoot, options.filename);\n  }\n\n  var cacheDirectory = options.cacheDirectory;\n  var cacheIdentifier = options.cacheIdentifier;\n  var metadataSubscribers = options.metadataSubscribers;\n\n  delete options.cacheDirectory;\n  delete options.cacheIdentifier;\n  delete options.metadataSubscribers;\n\n  this.cacheable();\n\n  if (cacheDirectory) {\n    var callback = this.async();\n    return cache({\n      directory: cacheDirectory,\n      identifier: cacheIdentifier,\n      source: source,\n      options: options,\n      transform: transpile\n    }, function (err) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          code = _ref.code,\n          map = _ref.map,\n          metadata = _ref.metadata;\n\n      if (err) return callback(err);\n\n      metadataSubscribers.forEach(function (s) {\n        return passMetadata(s, _this, metadata);\n      });\n\n      return callback(null, code, map);\n    });\n  }\n\n  var _transpile = transpile(source, options),\n      code = _transpile.code,\n      map = _transpile.map,\n      metadata = _transpile.metadata;\n\n  metadataSubscribers.forEach(function (s) {\n    return passMetadata(s, _this, metadata);\n  });\n\n  this.callback(null, code, map);\n};","/home/travis/build/npmtest/node-npmtest-babel-loader/babel-loader/lib/fs-cache.js":"\"use strict\";\n\nvar crypto = require(\"crypto\");\nvar mkdirp = require(\"mkdirp\");\nvar findCacheDir = require(\"find-cache-dir\");\nvar fs = require(\"fs\");\nvar os = require(\"os\");\nvar path = require(\"path\");\nvar zlib = require(\"zlib\");\n\nvar defaultCacheDirectory = null;\nvar read = function read(filename, callback) {\n  return fs.readFile(filename, function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n\n    return zlib.gunzip(data, function (err, content) {\n      var result = {};\n\n      if (err) {\n        return callback(err);\n      }\n\n      try {\n        result = JSON.parse(content);\n      } catch (e) {\n        return callback(e);\n      }\n\n      return callback(null, result);\n    });\n  });\n};\n\nvar write = function write(filename, result, callback) {\n  var content = JSON.stringify(result);\n\n  return zlib.gzip(content, function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n\n    return fs.writeFile(filename, data, callback);\n  });\n};\n\nvar filename = function filename(source, identifier, options) {\n  var hash = crypto.createHash(\"SHA1\");\n  var contents = JSON.stringify({\n    source: source,\n    options: options,\n    identifier: identifier\n  });\n\n  hash.end(contents);\n\n  return hash.read().toString(\"hex\") + \".json.gz\";\n};\n\nvar handleCache = function handleCache(directory, params, callback) {\n  var source = params.source;\n  var options = params.options || {};\n  var transform = params.transform;\n  var identifier = params.identifier;\n  var shouldFallback = typeof params.directory !== \"string\" && directory !== os.tmpdir();\n\n  mkdirp(directory, function (err) {\n    if (err) return shouldFallback ? handleCache(os.tmpdir(), params, callback) : callback(err);\n\n    var file = path.join(directory, filename(source, identifier, options));\n\n    return read(file, function (err, content) {\n      var result = {};\n\n      if (!err) return callback(null, content);\n\n      try {\n        result = transform(source, options);\n      } catch (error) {\n        return callback(error);\n      }\n\n      return write(file, result, function (err) {\n        if (err) return shouldFallback ? handleCache(os.tmpdir(), params, callback) : callback(err);\n\n        callback(null, result);\n      });\n    });\n  });\n};\n\nmodule.exports = function (params, callback) {\n  var directory = void 0;\n\n  if (typeof params.directory === \"string\") {\n    directory = params.directory;\n  } else {\n    if (defaultCacheDirectory === null) {\n      defaultCacheDirectory = findCacheDir({ name: \"babel-loader\" }) || os.tmpdir();\n    }\n    directory = defaultCacheDirectory;\n  }\n\n  handleCache(directory, params, callback);\n};","/home/travis/build/npmtest/node-npmtest-babel-loader/babel-loader/lib/utils/exists.js":"\"use strict\";\n\nvar fs = require(\"fs\");\n\nmodule.exports = function (cache) {\n  cache = cache || {};\n\n  return function (filename) {\n\n    if (!filename) {\n      return false;\n    }\n\n    cache[filename] = cache[filename] || fs.existsSync(filename);\n\n    return cache[filename];\n  };\n};","/home/travis/build/npmtest/node-npmtest-babel-loader/babel-loader/lib/utils/relative.js":"\"use strict\";\n\nvar path = require(\"path\");\n\nmodule.exports = function relative(sourceRoot, filename) {\n  var rootPath = sourceRoot.replace(/\\\\/g, \"/\").split(\"/\")[1];\n  var fileRootPath = filename.replace(/\\\\/g, \"/\").split(\"/\")[1];\n\n  if (rootPath && rootPath !== fileRootPath) {\n    return filename;\n  }\n\n  return path.relative(sourceRoot, filename);\n};","/home/travis/build/npmtest/node-npmtest-babel-loader/babel-loader/lib/utils/read.js":"\"use strict\";\n\nvar fs = require(\"fs\");\n\nmodule.exports = function (cache) {\n  cache = cache || {};\n\n  return function (filename) {\n\n    if (!filename) {\n      throw new Error(\"filename must be a string\");\n    }\n\n    cache[filename] = cache[filename] || fs.readFileSync(filename, \"utf8\");\n\n    return cache[filename];\n  };\n};","/home/travis/build/npmtest/node-npmtest-babel-loader/babel-loader/lib/resolve-rc.js":"\"use strict\";\n\nvar path = require(\"path\");\nvar exists = require(\"./utils/exists\")({});\nvar read = require(\"./utils/read\")({});\n\nvar cache = {};\n\nvar find = function find(start, rel) {\n  var file = path.join(start, rel);\n\n  if (exists(file)) {\n    return read(file);\n  }\n\n  var up = path.dirname(start);\n  if (up !== start) {\n    return find(up, rel);\n  }\n};\n\nmodule.exports = function (loc, rel) {\n  rel = rel || \".babelrc\";\n  var cacheKey = loc + \"/\" + rel;\n  if (!(cacheKey in cache)) {\n    cache[cacheKey] = find(loc, rel);\n  }\n  return cache[cacheKey];\n};"}